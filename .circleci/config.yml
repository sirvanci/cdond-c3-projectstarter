version: 2.1

orbs:
  slack: circleci/slack@4.4.4
  aws-cli: circleci/aws-cli@2.0.3

parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< pipeline.parameters.workflow-id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< pipeline.parameters.workflow-id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
             SUCCESS=$(curl -H "token: e8f3e291-aaf8-4f23-a5d0-6597fec2821c" --request GET https://api.memstash.io/values/migration_7ecfbeb)
             if [[ $SUCCESS==1 ]]
             then
              cd backend
              npm install
              npm run migrations:revert
             fi  
  notify-to-slack:
    description: when step is broken, notify our slack pipeline alert channel      
    steps:  
    - slack/notify:
          event: fail
          template: basic_fail_1
    - slack/notify:
          event: pass
          template: basic_success_1      
jobs:
  build-frontend:
    docker:
      - image: cimg/node:16.11.1
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-{{ .Environment.CIRCLE_SHA1 }}
      - notify-to-slack   

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules,backend/dist]
          key: backend-build-{{ .Environment.CIRCLE_SHA1 }}
      - notify-to-slack     

  test-frontend:
    docker:
      - image: cimg/node:16.11.1
    steps:
      - checkout
      - restore_cache:
          keys: 
          - frontend-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Unit Test Frontend
          command: |
            cd frontend
            NODE_OPTIONS=--max_old_space_size=4096 npm run test
      - notify-to-slack           
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
           - backend-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Unit Test Backend
          command: |
            cd backend
            npm run test
      - notify-to-slack       
  scan-frontend:
    docker:
      - image: cimg/node:16.11.1
    steps:
      - checkout
      - restore_cache:
          keys: 
           - frontend-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Analyze Frontend
          command: |
            cd frontend
            ls
            npm audit fix --audit-level=critical --force
      - notify-to-slack 
  scan-backend:
    docker:
          - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
           - backend-build-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Analyze Backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - notify-to-slack 
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout
      - run: 
          name: install jq && tar && gzip
          command: yum install jq tar gzip -y    
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>" 
      - run:
          name: MemCache back-end url
          command: |
            export BACKEND_URL="$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicDnsName' \
            --filters "Name=tag:project,Values=udapeople" \
            --output text)" \
            
            curl -H "Content-Type: text/plain" -H "token:e8f3e291-aaf8-4f23-a5d0-6597fec2821c " \
            --request PUT \
            --data "$BACKEND_URL" \
            https://api.memstash.io/values/backend-url
                    
                     
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-<< pipeline.parameters.workflow-id >>" \
              --parameter-overrides ID="<< pipeline.parameters.workflow-id >>" 
              
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            curl -H "token: e8f3e291-aaf8-4f23-a5d0-6597fec2821c" \
            --request GET https://api.memstash.io/values/backend-url >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment
      - notify-to-slack      
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1a:ef:57:2b:7b:43:77:1b:c2:1c:3d:56:ba:7d:1b:28:b4:ee:e9:02"]
      - attach_workspace:
         at: ~/    
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add curl
            apk add jq
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment
      - notify-to-slack      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - restore_cache:
          keys: 
          - backend-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Create env file
          command: |
            echo NODE_ENV=production >> backend/.env
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> backend/.env
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env            
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > output.txt
            cat output.txt
         
      - run:
          name: Send migration results to memstash
          command: |
            export MG_NOT_FOUND=$(cat backend/output.txt | grep -c "No migrations are pending")
            export MG_EXE=$(cat backend/output.txt | grep -c "has been executed successfully")
            if [ $MG_NOT_FOUND > 0 ] || [ $MG_EXE > 0 ] 
            then
              curl -H "Content-Type: text/plain" -H "token: e8f3e291-aaf8-4f23-a5d0-6597fec2821c" \
              --request PUT \
              --data "1" \
              https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
            else
             curl -H "Content-Type: text/plain" -H "token: e8f3e291-aaf8-4f23-a5d0-6597fec2821c" \
              --request PUT \
              --data "0" \
              https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
             exit 1
            fi
      - revert-migrations      
      - destroy-environment
      - notify-to-slack
  
  deploy-frontend:
    docker:
      - image: circleci/node:16.11.1
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm i
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(curl -H "token: e8f3e291-aaf8-4f23-a5d0-6597fec2821c" --request GET https://api.memstash.io/values/backend-url)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run: 
         name: Backed with url 
         command: |
          cd frontend
          npm run build     
      - run:
          name: Deploy frontend objects
          command: aws s3 cp --recursive frontend/dist s3://udapeople-<< pipeline.parameters.workflow-id >>
      - run: 
          name: Delete s3 bucket files
          when: on_fail
          command: aws s3 rm --recursive  s3://udapeople-<< pipeline.parameters.workflow-id >>
      - destroy-environment    


  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["1a:ef:57:2b:7b:43:77:1b:c2:1c:3d:56:ba:7d:1b:28:b4:ee:e9:02"]
      - attach_workspace:
         at: ~/      
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add curl
            apk add jq
      - restore_cache:
         keys: 
          - backend-build-{{ .Environment.CIRCLE_SHA1 }}            
      - run:
          name: Deploy backend
          command: |
            # create cache directory, restore-cache does not create
            mkdir backend/dist
            mkdir backend/node_modules
            # copy cache files to backend
            cp -r /home/circleci/project/backend/dist/* backend/dist
            cp -r /home/circleci/project/backend/node_modules/* backend/node_modules
            # create dist env
            echo NODE_ENV=production >> backend/dist/.env
            echo TYPEORM_ENTITIES=./modules/domain/**/*.entity.js >> backend/dist/.env
            echo TYPEORM_CONNECTION=postgres >> backend/dist/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/dist/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/dist/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/dist/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/dist/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/dist/.env 
            # zip for ansible file transfer
            tar -cf backend-dist.tar backend
            # backend move to ansible files
            mkdir .circleci/ansible/roles/deploy/files
            mv backend-dist.tar .circleci/ansible/roles/deploy/files
            # Run ansible that copy backend project to server then pm2 start
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment      

  smoke-test:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add curl
      - run:
          name: Get backend url
          command: |
           #export BACKEND_URL=$(curl -H "token: e8f3e291-aaf8-4f23-a5d0-6597fec2821c" --request GET https://api.memstash.io/values/backend-url)
            
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_URL=$(curl -H "token: e8f3e291-aaf8-4f23-a5d0-6597fec2821c" --request GET https://api.memstash.io/values/backend-url)
            echo http://$BACKEND_URL:3030/api/status
            if curl -s http://$BACKEND_URL:3030/api/status
            then 
              exit 0
            else
              exit 1
            fi  
      - run:
          name: Frontend smoke test.
          command: |
            URL=http://udapeople-<< pipeline.parameters.workflow-id >>.s3-website-us-east-1.amazonaws.com
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi

  cloudfront-update:
      # Docker image here that supports AWS CLI
    docker:
      - image: amazon/aws-cli  
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
      # Docker image here
    docker:
      - image: amazon/aws-cli  
    steps:
      # Checkout code from 
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend:
         context: slack-secrets
         
      - build-backend:
         context: slack-secrets
  
      - test-frontend:
          requires: [build-frontend]
          context: slack-secrets

      - test-backend:
          requires: [build-backend]
          context: slack-secrets
  
      - scan-backend:
          requires: [build-backend]
          context: slack-secrets

      - scan-frontend:
          requires: [build-frontend]
          context: slack-secrets
      - deploy-infrastructure:
          requires: [build-backend]
          filters:
            branches:
              only: [test-feature-branch]
          context: slack-secrets    
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context: slack-secrets 
      - run-migrations:
          requires: [configure-infrastructure]
          context: slack-secrets 
      - deploy-frontend:
          requires: [run-migrations]
          context: slack-secrets 
      - deploy-backend:
          requires: [run-migrations]
          context: slack-secrets 
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          context: slack-secrets 
      - cloudfront-update:
          requires: [smoke-test]
          context: slack-secrets 
      - cleanup:
          requires: [cloudfront-update]
          context: slack-secrets 